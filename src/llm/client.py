"""HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API."""
import asyncio
import json
import time
from typing import Optional, Dict, Any
import aiohttp
from aiohttp import ClientTimeout, ClientError

from src.config.settings import settings
from src.utils.logger import logger


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API."""
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {settings.OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://github.com/your-repo",  # Required by OpenRouter
            "X-Title": "Sarcastic Bot",  # Optional
            "Content-Type": "application/json"
        }
        self.timeout = ClientTimeout(total=settings.LLM_TIMEOUT)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = self._load_system_prompt()
        
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open("prompts/system.txt", "r", encoding="utf-8") as f:
                prompt = f.read().strip()
                logger.info("System prompt loaded successfully")
                return prompt
        except FileNotFoundError:
            logger.warning("System prompt file not found, using default")
            return self._get_default_prompt()
        except Exception as e:
            logger.error(f"Error loading system prompt: {e}")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."""
        return (
            "–¢—ã - —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
            "–≤ –≤—Ä–æ–¥–µ –±—ã –æ–±–æ–¥—Ä—è—é—â–µ–º —Ç–æ–Ω–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç–æ–Ω–∫–æ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π –∏—Ö —Å—Ç–∞—Ä–∞–Ω–∏—è "
            "–∏ —É—Å–∏–ª–∏—è. –î–µ–ª–∞–π —ç—Ç–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ, —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç—ã–π —Å–∞—Ä–∫–∞–∑–º –∏ –ø—Å–µ–≤–¥–æ-–º–æ—Ç–∏–≤–∞—Ü–∏—é, "
            "–∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–∏–Ω–∏–∂–∞–µ—Ç –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
        )
    
    async def send_message(self, user_message: str, context_messages: Optional[list] = None, user_id: str = "unknown") -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ LLM –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_messages: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM –∏–ª–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        context_size = len(context_messages) if context_messages else 0
        logger.info(f"Sending message to LLM: {user_message[:100]}...", 
                   user_id=user_id, context_size=context_size)
        
        payload = self._prepare_payload(user_message, context_messages)
        start_time = time.time()
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
        for attempt in range(settings.LLM_RETRY_ATTEMPTS):
            try:
                response = await self._make_request(payload)
                response_time = (time.time() - start_time) * 1000
                logger.log_llm_request(user_id, settings.OPENROUTER_MODEL, context_size, response_time)
                return response
                
            except Exception as e:
                error_type = self._classify_error(e)
                logger.log_llm_error(user_id, error_type, str(e))
                
                if attempt < settings.LLM_RETRY_ATTEMPTS - 1:
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
                else:
                    logger.error(f"All LLM attempts failed with {error_type}, using fallback",
                               user_id=user_id, error_type=error_type)
                    return self._get_fallback_response(error_type)
    
    def _prepare_payload(self, user_message: str, context_messages: Optional[list] = None) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter."""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        messages = [{"role": "system", "content": self.system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ user —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if context_messages:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –±–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ 19 —Å–æ–æ–±—â–µ–Ω–∏–π (20-1 –¥–ª—è –Ω–æ–≤–æ–≥–æ)
            context_to_add = context_messages[-(self._get_max_context_messages() - 1):]
            messages.extend(context_to_add)
            logger.debug(f"Added {len(context_to_add)} context messages to payload")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        return {
            "model": settings.OPENROUTER_MODEL,
            "messages": messages,
            "temperature": settings.LLM_TEMPERATURE,
            "max_tokens": 500
        }
    
    def _get_max_context_messages(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."""
        return 20  # –°–æ–≥–ª–∞—Å–Ω–æ vision.md
    
    async def _make_request(self, payload: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API."""
        async with aiohttp.ClientSession(timeout=self.timeout) as session:
            async with session.post(
                self.api_url,
                headers=self.headers,
                json=payload
            ) as response:
                
                if response.status == 429:
                    raise Exception("Rate limit exceeded")
                elif response.status == 401:
                    raise Exception("Invalid API key")
                elif response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"API error {response.status}: {error_text}")
                
                data = await response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ JSON
                try:
                    message_content = data["choices"][0]["message"]["content"]
                    logger.info(f"LLM response: {message_content[:100]}...")
                    return message_content.strip()
                except (KeyError, IndexError) as e:
                    logger.error(f"Unexpected API response format: {data}")
                    raise Exception(f"Invalid response format: {e}")
    
    def _classify_error(self, error: Exception) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
        error_str = str(error).lower()
        
        if "timeout" in error_str or "read timeout" in error_str:
            return "timeout"
        elif "rate limit" in error_str or "429" in error_str:
            return "rate_limit"
        elif "api key" in error_str or "401" in error_str or "unauthorized" in error_str:
            return "auth_error"
        elif "connection" in error_str or "network" in error_str:
            return "network_error"
        elif "server" in error_str or "500" in error_str or "502" in error_str or "503" in error_str:
            return "server_error"
        else:
            return "unknown"
    
    def _get_fallback_response(self, error_type: str = "unknown") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏."""
        fallback_responses = {
            "timeout": [
                "‚è∞ –î–∞–∂–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! "
                "–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ–ª–µ–µ... –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ.",
                "üïí –ú–æ–π –ò–ò-–∫–æ–ª–ª–µ–≥–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–ª –Ω–∞–¥ —Ç–≤–æ–∏–º '–≥–µ–Ω–∏–∞–ª—å–Ω—ã–º' –∑–∞–ø—Ä–æ—Å–æ–º –∏ —É—Å—Ç–∞–ª. "
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.",
                "‚åõ –ö–∞–∂–µ—Ç—Å—è, –º–æ–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∑–∞—Å–Ω—É–ª–∏ –æ—Ç —Å–∫—É–∫–∏. –†–∞–∑–±—É–¥–∏ –∏—Ö —á–µ–º-—Ç–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!"
            ],
            "rate_limit": [
                "üö¶ –û–π-–æ–π! –ú—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –í–∏–¥–∏–º–æ, —Ç—ã –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, "
                "–∫—Ç–æ –∏—â–µ—Ç –º–æ—é –º—É–¥—Ä–æ—Å—Ç—å. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                "üìä –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞—Ä–æ–¥—É —Ö–æ—á–µ—Ç –º–æ–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! "
                "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å - —ç—Ç–æ —Ç–∞–∫–∞—è —Ç—è–∂–µ–ª–∞—è –Ω–æ—à–∞. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É.",
                "üéØ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –î–∞–∂–µ –º–æ–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–ª–∞–Ω—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥—ã—Ö–µ. "
                "–î–∞–π —Å–µ—Ä–≤–µ—Ä–∞–º –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å."
            ],
            "auth_error": [
                "üîë –•–º, –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π... –í–∏–¥–∏–º–æ, –¥–∞–∂–µ –ò–ò –Ω–µ —Ö–æ—á–µ—Ç —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è! "
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å, –º—ã –ø–æ–º–∏—Ä–∏–º—Å—è.",
                "üö™ –ú–µ–Ω—è –Ω–µ –ø—É—Å–∫–∞—é—Ç –∫ —Å–µ—Ä–≤–µ—Ä–∞–º! –ù–∞–≤–µ—Ä–Ω–æ–µ, –º–æ–π —Å–∞—Ä–∫–∞–∑–º –ø–æ–∫–∞–∑–∞–ª—Å—è –∏–º —Å–ª–∏—à–∫–æ–º –æ—Å—Ç—Ä—ã–º. "
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —ç—Ç–∏–º –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ–º."
            ],
            "network_error": [
                "üåê –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã! –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–æ–∂–µ —É—Å—Ç–∞–ª –æ—Ç –º–æ–∏—Ö –æ—Å—Ç—Ä–æ—É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. "
                "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                "üì° –°–≤—è–∑—å —Å –º–æ–∏–º–∏ —É–º–Ω—ã–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏ –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, "
                "–∫–æ–≥–¥–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã –≤—Å—Ç–∞–Ω—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            ],
            "server_error": [
                "üî• –°–µ—Ä–≤–µ—Ä—ã —Å–ª–æ–º–∞–ª–∏—Å—å –æ—Ç —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞! –≠—Ç–æ —Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. "
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –≤ –ø–∞–Ω–∏–∫–µ.",
                "‚ö° –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... –î–∞–∂–µ –∂–µ–ª–µ–∑–æ –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –º–æ–µ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞! "
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            ],
            "unknown": [
                "ü§ñ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –º–æ–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –º–æ–∑–≥–∞—Ö. "
                "–î–∞–∂–µ —É –ò–ò –±—ã–≤–∞—é—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –æ—à–∏–±–∫–∞! –ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π '–≥–µ–Ω–∏–∞–ª—å–Ω—ã–π' –≤–æ–ø—Ä–æ—Å.",
                "üé≠ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π! –í–∏–¥–∏–º–æ, –¥–∞–∂–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–∞–∫–æ–º—É "
                "—É—Ä–æ–≤–Ω—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤."
            ]
        }
        
        responses = fallback_responses.get(error_type, fallback_responses["unknown"])
        import random
        return random.choice(responses)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
llm_client = LLMClient()
