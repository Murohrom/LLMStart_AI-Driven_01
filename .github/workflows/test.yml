name: üß™ Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: ‚ö° Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: üì¶ Install dependencies
      run: |
        uv sync
    
    - name: üîç Lint with flake8
      run: |
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        uv run flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        uv run flake8 src tests --count --max-complexity=10 --max-line-length=88 --statistics
    
    - name: üîç Type check with mypy
      run: |
        uv run mypy src --ignore-missing-imports
      continue-on-error: true  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º CI –Ω–∞ –æ—à–∏–±–∫–∞—Ö —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤ MVP
    
    - name: ‚ú® Check code formatting with black
      run: |
        uv run black --check --diff src tests
      continue-on-error: true  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º CI –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ MVP
    
    - name: üß™ Run tests with pytest
      run: |
        uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º CI –µ—Å–ª–∏ codecov –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

  docker-test:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Build Docker image
      run: |
        docker build -t sarcastic-bot:test .
    
    - name: üß™ Test Docker container starts
      run: |
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
        echo "TELEGRAM_BOT_TOKEN=test_token" > .env
        echo "OPENROUTER_API_KEY=test_key" >> .env
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –∫—Ä–∞—à–∏—Ç—Å—è
        timeout 10s docker run --env-file .env sarcastic-bot:test || true
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        docker images | grep sarcastic-bot

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: ‚ö° Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: üì¶ Install dependencies
      run: |
        uv sync
    
    - name: üîí Run safety check
      run: |
        uv add --dev safety
        uv run safety check
      continue-on-error: true  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º CI –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö –≤ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
