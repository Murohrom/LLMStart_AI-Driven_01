.PHONY: help install dev test build clean deploy cloud-deploy

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON = python
UV = uv
DOCKER_IMAGE = sarcastic-bot
DOCKER_TAG = latest

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)–°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π Telegram-–±–æ—Ç - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo ""
	@echo "$(YELLOW)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(UV) sync
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(UV) run python src/main.py

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(UV) run pytest tests/ -v --cov=src --cov-report=term-missing

test-short: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±—ã—Å—Ç—Ä–æ
	@echo "$(GREEN)‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	$(UV) run pytest tests/ -x --tb=short

build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "$(GREEN)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t $(DOCKER_IMAGE):$(DOCKER_TAG) .
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: $(DOCKER_IMAGE):$(DOCKER_TAG)$(NC)"

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ Docker...$(NC)"
	docker run --env-file .env --rm $(DOCKER_IMAGE):$(DOCKER_TAG)

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache
	rm -rf .coverage
	rm -rf htmlcov
	docker system prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

deploy: ## –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π
	@echo "$(GREEN)üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π...$(NC)"
	@make test
	@make build
	@make run

cloud-deploy: ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É –¥–µ–ø–ª–æ—é
	@echo "$(GREEN)‚òÅÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É –¥–µ–ø–ª–æ—é...$(NC)"
	@make test
	@make build
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é –≤ –æ–±–ª–∞–∫–æ$(NC)"
	@echo "$(YELLOW)üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: DEPLOY.md$(NC)"

docker-test: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
	@echo "$(GREEN)üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	docker run --env-file .env --rm $(DOCKER_IMAGE):$(DOCKER_TAG) --help > /dev/null 2>&1
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ$(NC)"

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	@if [ -f logs/app.log ]; then \
		tail -f logs/app.log; \
	else \
		echo "$(YELLOW)–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

status: ## –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "UV: $(shell $(UV) --version)"
	@echo "Docker: $(shell docker --version)"
	@echo "–¢–µ—Å—Ç—ã: $(shell $(UV) run pytest tests/ --tb=no -q | tail -1)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Windows
install.cmd: install
dev.cmd: dev
test.cmd: test
build.cmd: build
clean.cmd: clean
deploy.cmd: deploy
