"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞."""
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from src.config.settings import settings
from src.utils.logger import logger
from src.llm.client import llm_client
from src.utils.history import history_manager


class BotHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""
    
    def __init__(self, bot: Bot, dp: Dispatcher) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.bot = bot
        self.dp = dp
        self._register_handlers()
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.dp.message.register(self.start_handler, CommandStart())
        self.dp.message.register(self.help_handler, Command("help"))
        self.dp.message.register(self.clear_handler, Command("clear"))
        self.dp.message.register(self.message_handler)
    
    async def start_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        logger.info(f"User {message.from_user.id} started bot")
        
        welcome_text = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏ —è –¥–∞–º —Ç–µ–±–µ... "
            "¬´–ø–æ–¥–¥–µ—Ä–∂–∫—É¬ª –≤ —Å–≤–æ–µ–º –æ—Å–æ–±–æ–º —Å—Ç–∏–ª–µ. –¢–µ–ø–µ—Ä—å —è –∏—Å–ø–æ–ª—å–∑—É—é "
            "–Ω–∞—Å—Ç–æ—è—â–∏–π –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        )
        
        await message.answer(welcome_text)
    
    async def help_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        logger.info(f"User {message.from_user.id} requested help")
        
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
            "–Ø - —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –ò–ò. "
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –æ—Ç–≤–µ—á—É –≤ —Å–≤–æ–µ–º "
            "–Ω–µ–ø–æ–¥—Ä–∞–∂–∞–µ–º–æ–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"
        )
        
        await message.answer(help_text)
    
    async def clear_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear."""
        user_id = str(message.from_user.id)
        logger.info(f"User {user_id} requested history clear")
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleared = history_manager.clear_user_history(user_id)
        
        if cleared:
            response = (
                "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å —è –∑–∞–±—ã–ª –æ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö ¬´–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö¬ª. "
                "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –ø–æ—Ä–∞–∑–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏!"
            )
        else:
            response = (
                "ü§î –ê –æ—á–∏—â–∞—Ç—å-—Ç–æ –Ω–µ—á–µ–≥–æ!\n\n"
                "–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏. "
                "–í–∏–¥–∏–º–æ, –¥–∞–∂–µ –ø–∞–º—è—Ç—å –æ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏—Å–ø–∞—Ä–∏–ª–∞—Å—å –æ—Ç –∏—Ö... —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏."
            )
        
        await message.answer(response)
    
    async def message_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM –∏ –∏—Å—Ç–æ—Ä–∏–µ–π."""
        user_id = str(message.from_user.id)
        user_text = message.text
        
        if not user_text:
            await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        logger.info(f"User {user_id} sent message: {user_text[:100]}...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            context_messages = history_manager.get_context_messages(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_manager.add_message(user_id, "user", user_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            llm_response = await llm_client.send_message(user_text, context_messages)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_manager.add_message(user_id, "assistant", llm_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(llm_response)
            logger.info(f"Sent LLM response to user {user_id} (history: {history_manager.get_user_message_count(user_id)} messages)")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
            if len(history_manager.user_sessions) % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cleaned = history_manager.clear_old_sessions()
                if cleaned > 0:
                    logger.info(f"Cleaned {cleaned} old sessions during maintenance")
            
        except Exception as e:
            logger.error(f"Error processing message for user {user_id}: {e}")
            
            # Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error_response = (
                "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º. "
                "–í–∏–¥–∏–º–æ, –¥–∞–∂–µ –ò–ò –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —Ç–≤–æ–∏–º —É—Ä–æ–≤–Ω–µ–º '–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏'. "
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É. ü§ñüí•"
            )
            await message.answer(error_response)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("Starting sarcastic bot...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        dp = Dispatcher()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        BotHandlers(bot, dp)
        
        logger.info("Bot handlers registered successfully")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("Starting polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        logger.info("Bot stopped")
