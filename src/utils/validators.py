"""–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
import re
from typing import Tuple, Optional


class MessageValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    MAX_MESSAGE_LENGTH = 4000  # –ß—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ Telegram (4096)
    MIN_MESSAGE_LENGTH = 1
    MAX_EMOJI_COUNT = 50
    
    @classmethod
    def validate_user_message(cls, message: str) -> Tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            Tuple[bool, Optional[str]]: (is_valid, error_message)
        """
        if not message or not message.strip():
            return False, "empty"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(message) > cls.MAX_MESSAGE_LENGTH:
            return False, "too_long"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
        emoji_count = cls._count_emojis(message)
        if emoji_count > cls.MAX_EMOJI_COUNT:
            return False, "too_many_emojis"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)
        if cls._is_spam_message(message):
            return False, "spam"
        
        return True, None
    
    @classmethod
    def _count_emojis(cls, text: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ."""
        emoji_pattern = re.compile(
            "["
            "\U0001F600-\U0001F64F"  # emoticons
            "\U0001F300-\U0001F5FF"  # symbols & pictographs
            "\U0001F680-\U0001F6FF"  # transport & map symbols
            "\U0001F1E0-\U0001F1FF"  # flags (iOS)
            "\U00002702-\U000027B0"
            "\U000024C2-\U0001F251"
            "]+",
            flags=re.UNICODE
        )
        return len(emoji_pattern.findall(text))
    
    @classmethod
    def _is_spam_message(cls, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ 20 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        if re.search(r'(.)\1{19,}', text):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Å–ª–æ–≤
        words = text.lower().split()
        if len(words) > 5:
            unique_words = set(words)
            if len(unique_words) / len(words) < 0.3:  # –ú–µ–Ω–µ–µ 30% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                return True
        
        return False
    
    @classmethod
    def get_validation_error_message(cls, error_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        messages = {
            "empty": (
                "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥! –ù–µ–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. "
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–π —Ç–∞–ª–∞–Ω—Ç —á—Ç–µ–Ω–∏—è –º—ã—Å–ª–µ–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
                "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç–µ–∫—Å—Ç–æ–º - —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º '–∏—Å–∫—É—Å—Å—Ç–≤–µ'."
            ),
            "too_long": (
                "üìö –û–≥–æ! –¢—ã –Ω–∞–ø–∏—Å–∞–ª —Ü–µ–ª—ã–π —Ä–æ–º–∞–Ω! –ë–æ—é—Å—å, –º–æ–π –º–æ–∑–≥ –Ω–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω "
                "–∫ —Ç–∞–∫–∏–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —à–µ–¥–µ–≤—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ "
                "–¥–æ —Ä–∞–∑–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç. "
                f"–ú–∞–∫—Å–∏–º—É–º {cls.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
            ),
            "too_many_emojis": (
                "üé≠üé™üé® –í–∞—É! –ö–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏! "
                "–•–æ—Ç—è —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞—Ä–æ–º–æ–¥–Ω—ã–µ –±—É–∫–≤—ã. "
                f"–û–≥—Ä–∞–Ω–∏—á—å —Å–µ–±—è {cls.MAX_EMOJI_COUNT} —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥—å –¥–æ–±—Ä."
            ),
            "spam": (
                "üîÑ –•–º, –∞ —ç—Ç–æ –Ω–µ —Å–ø–∞–º —Å–ª—É—á–∞–π–Ω–æ? –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–∞ - "
                "—ç—Ç–æ –∫–æ–Ω–µ—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è, –Ω–æ —è –±–æ–ª—å—à–µ —Ü–µ–Ω—é "
                "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –º—ã—Å–ª—è—Ö. –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ–ª–µ–µ... —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ!"
            )
        }
        
        return messages.get(error_type, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
validator = MessageValidator()
