---
alwaysApply: true
---

# Соглашения разработки кода

> **Базируется на**: @vision.md - полное техническое видение проекта

## Принципы разработки

### 1. KISS - Keep It Simple, Stupid
- Никаких сложных паттернов без необходимости
- Линейная логика вместо многоуровневых абстракций  
- Простые структуры данных (`dict`, `list`) вместо сложных классов
- Минимум внешних зависимостей

*См. подробнее: @vision.md раздел "Принципы разработки → KISS"*

### 2. MVP-first подход
- Сначала базовый функционал: сообщение → LLM → ответ
- Без сохранения истории, сложной логики на старте
- Итеративные улучшения малыми шагами

*См. подробнее: @vision.md раздел "Принципы разработки → MVP-first"*

### 3. Single Responsibility
- Одна функция = одна задача
- Отдельные модули: `bot/`, `llm/`, `config/`
- Чистое разделение бизнес-логики и инфраструктуры

*См. подробнее: @vision.md раздел "Принципы разработки → Single responsibility"*

## Качество кода

### Читаемость кода
- **Говорящие имена**: `send_to_llm` вместо `process`
- **Короткие функции**: до 20 строк
- **Явная типизация**: обязательные type hints
- **Без магии**: никаких "магических" чисел и строк

### Обработка ошибок
- **Fail fast**: валидация на раннем этапе
- **Явные исключения** вместо молчаливых ошибок
- **Быстрая обратная связь** при проблемах с API

*См. подробнее: @vision.md раздел "Принципы разработки → Fail fast, Readable code"*

## Структура проекта

### Организация файлов
```
src/
├── bot/handlers.py          # Обработчики сообщений
├── llm/client.py           # Клиент для OpenRouter API  
├── config/settings.py      # Настройки приложения
└── main.py                 # Точка входа
```

- **Плоская организация** - минимум вложенности
- **Стандартные соглашения** - `tests/`, `src/`, файлы в корне

*См. полную структуру: @vision.md раздел "Структура проекта"*

### Архитектурные решения
- **Монолитная архитектура** - всё в одном приложении
- **Линейный поток**: Telegram → Bot → LLM → Bot → Telegram
- **In-memory история** - хранение в памяти LLM Client
- **Минимум абстракций**

*См. подробнее: @vision.md раздел "Архитектура проекта"*

## Конфигурирование

### Управление настройками
- **12-Factor App** - конфигурация через переменные окружения
- **Безопасность** - никаких секретов в коде
- **Один источник истины** - все настройки в одном месте

### Обязательные файлы
- `.env` - переменные окружения
- `prompts/system.txt` - системный промпт отдельно от кода

*См. подробнее: @vision.md раздел "Подход к конфигурированию"*

## Работа с LLM

### Интеграция
- **Единственный провайдер**: OpenRouter
- **Простая HTTP интеграция**: requests/httpx
- **Stateless подход**: передаём контекст явно
- **Retry логика**: повторы при сбоях

### Контекст и история
- **Последние 20 сообщений** из истории диалога
- **Системный промпт** всегда первым
- **Структура данных**: `dict[chat_id: str, List[dict]]`

*См. подробнее: @vision.md раздел "Работа с LLM", "Модель данных"*

## Логирование и мониторинг

### Обязательное логирование
- **Все запросы к LLM API** - промпт, параметры, время
- **Все ответы от LLM API** - полный ответ, время обработки  
- **Структурированные логи** - JSON формат
- **Ошибки с контекстом** для отладки

### Простой мониторинг
- **Файловые логи** + stdout
- **Базовые метрики** - только критически важные
- **Без внешних систем** - никаких Grafana/Prometheus для MVP

*См. подробнее: @vision.md раздел "Мониторинг LLM"*

## Автоматизация

### CMD команды (Windows)
- `dev.cmd` - запуск для разработки
- `install.cmd` - установка зависимостей через uv
- `build.cmd` - сборка Docker образа
- `test.cmd` - запуск тестов

### Make команды (универсальные)
- `make dev` - запуск для разработки
- `make install` - установка зависимостей
- `make build` - сборка Docker образа
- `make test` - запуск тестов
- `make clean` - очистка временных файлов
- `make deploy` - автоматизированный деплой

*См. подробнее: @vision.md раздел "Деплой → CMD команды"*

---

**Помни**: Цель - работающий код, а не идеальная архитектура. Оптимизируй только при измеренных проблемах.
# Соглашения разработки кода

> **Базируется на**: @vision.md - полное техническое видение проекта

## Принципы разработки

### 1. KISS - Keep It Simple, Stupid
- Никаких сложных паттернов без необходимости
- Линейная логика вместо многоуровневых абстракций  
- Простые структуры данных (`dict`, `list`) вместо сложных классов
- Минимум внешних зависимостей

*См. подробнее: @vision.md раздел "Принципы разработки → KISS"*

### 2. MVP-first подход
- Сначала базовый функционал: сообщение → LLM → ответ
- Без сохранения истории, сложной логики на старте
- Итеративные улучшения малыми шагами

*См. подробнее: @vision.md раздел "Принципы разработки → MVP-first"*

### 3. Single Responsibility
- Одна функция = одна задача
- Отдельные модули: `bot/`, `llm/`, `config/`
- Чистое разделение бизнес-логики и инфраструктуры

*См. подробнее: @vision.md раздел "Принципы разработки → Single responsibility"*

## Качество кода

### Читаемость кода
- **Говорящие имена**: `send_to_llm` вместо `process`
- **Короткие функции**: до 20 строк
- **Явная типизация**: обязательные type hints
- **Без магии**: никаких "магических" чисел и строк

### Обработка ошибок
- **Fail fast**: валидация на раннем этапе
- **Явные исключения** вместо молчаливых ошибок
- **Быстрая обратная связь** при проблемах с API

*См. подробнее: @vision.md раздел "Принципы разработки → Fail fast, Readable code"*

## Структура проекта

### Организация файлов
```
src/
├── bot/handlers.py          # Обработчики сообщений
├── llm/client.py           # Клиент для OpenRouter API  
├── config/settings.py      # Настройки приложения
└── main.py                 # Точка входа
```

- **Плоская организация** - минимум вложенности
- **Стандартные соглашения** - `tests/`, `src/`, файлы в корне

*См. полную структуру: @vision.md раздел "Структура проекта"*

### Архитектурные решения
- **Монолитная архитектура** - всё в одном приложении
- **Линейный поток**: Telegram → Bot → LLM → Bot → Telegram
- **In-memory история** - хранение в памяти LLM Client
- **Минимум абстракций**

*См. подробнее: @vision.md раздел "Архитектура проекта"*

## Конфигурирование

### Управление настройками
- **12-Factor App** - конфигурация через переменные окружения
- **Безопасность** - никаких секретов в коде
- **Один источник истины** - все настройки в одном месте

### Обязательные файлы
- `.env` - переменные окружения
- `prompts/system.txt` - системный промпт отдельно от кода

*См. подробнее: @vision.md раздел "Подход к конфигурированию"*

## Работа с LLM

### Интеграция
- **Единственный провайдер**: OpenRouter
- **Простая HTTP интеграция**: requests/httpx
- **Stateless подход**: передаём контекст явно
- **Retry логика**: повторы при сбоях

### Контекст и история
- **Последние 20 сообщений** из истории диалога
- **Системный промпт** всегда первым
- **Структура данных**: `dict[chat_id: str, List[dict]]`

*См. подробнее: @vision.md раздел "Работа с LLM", "Модель данных"*

## Логирование и мониторинг

### Обязательное логирование
- **Все запросы к LLM API** - промпт, параметры, время
- **Все ответы от LLM API** - полный ответ, время обработки  
- **Структурированные логи** - JSON формат
- **Ошибки с контекстом** для отладки

### Простой мониторинг
- **Файловые логи** + stdout
- **Базовые метрики** - только критически важные
- **Без внешних систем** - никаких Grafana/Prometheus для MVP

*См. подробнее: @vision.md раздел "Мониторинг LLM"*

## Автоматизация

### CMD команды (Windows)
- `dev.cmd` - запуск для разработки
- `install.cmd` - установка зависимостей через uv
- `build.cmd` - сборка Docker образа
- `test.cmd` - запуск тестов

### Make команды (универсальные)
- `make dev` - запуск для разработки
- `make install` - установка зависимостей
- `make build` - сборка Docker образа
- `make test` - запуск тестов
- `make clean` - очистка временных файлов
- `make deploy` - автоматизированный деплой

*См. подробнее: @vision.md раздел "Деплой → CMD команды"*

---

**Помни**: Цель - работающий код, а не идеальная архитектура. Оптимизируй только при измеренных проблемах.
