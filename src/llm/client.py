"""HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API."""
import asyncio
import json
from typing import Optional, Dict, Any
import aiohttp
from aiohttp import ClientTimeout, ClientError

from src.config.settings import settings
from src.utils.logger import logger


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API."""
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {settings.OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://github.com/your-repo",  # Required by OpenRouter
            "X-Title": "Sarcastic Bot",  # Optional
            "Content-Type": "application/json"
        }
        self.timeout = ClientTimeout(total=settings.LLM_TIMEOUT)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = self._load_system_prompt()
        
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open("prompts/system.txt", "r", encoding="utf-8") as f:
                prompt = f.read().strip()
                logger.info("System prompt loaded successfully")
                return prompt
        except FileNotFoundError:
            logger.warning("System prompt file not found, using default")
            return self._get_default_prompt()
        except Exception as e:
            logger.error(f"Error loading system prompt: {e}")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."""
        return (
            "–¢—ã - —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
            "–≤ –≤—Ä–æ–¥–µ –±—ã –æ–±–æ–¥—Ä—è—é—â–µ–º —Ç–æ–Ω–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç–æ–Ω–∫–æ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π –∏—Ö —Å—Ç–∞—Ä–∞–Ω–∏—è "
            "–∏ —É—Å–∏–ª–∏—è. –î–µ–ª–∞–π —ç—Ç–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ, —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç—ã–π —Å–∞—Ä–∫–∞–∑–º –∏ –ø—Å–µ–≤–¥–æ-–º–æ—Ç–∏–≤–∞—Ü–∏—é, "
            "–∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–∏–Ω–∏–∂–∞–µ—Ç –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
        )
    
    async def send_message(self, user_message: str, context_messages: Optional[list] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ LLM –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_messages: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM –∏–ª–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info(f"Sending message to LLM: {user_message[:100]}...")
        context_info = f" with {len(context_messages)} context messages" if context_messages else ""
        logger.debug(f"LLM request{context_info}")
        
        payload = self._prepare_payload(user_message, context_messages)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
        for attempt in range(settings.LLM_RETRY_ATTEMPTS):
            try:
                response = await self._make_request(payload)
                logger.info(f"LLM response received on attempt {attempt + 1}")
                return response
                
            except Exception as e:
                logger.warning(f"LLM request failed (attempt {attempt + 1}): {e}")
                
                if attempt < settings.LLM_RETRY_ATTEMPTS - 1:
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
                else:
                    logger.error("All LLM attempts failed, using fallback")
                    return self._get_fallback_response()
    
    def _prepare_payload(self, user_message: str, context_messages: Optional[list] = None) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter."""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        messages = [{"role": "system", "content": self.system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ user —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if context_messages:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –±–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ 19 —Å–æ–æ–±—â–µ–Ω–∏–π (20-1 –¥–ª—è –Ω–æ–≤–æ–≥–æ)
            context_to_add = context_messages[-(self._get_max_context_messages() - 1):]
            messages.extend(context_to_add)
            logger.debug(f"Added {len(context_to_add)} context messages to payload")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        return {
            "model": settings.OPENROUTER_MODEL,
            "messages": messages,
            "temperature": settings.LLM_TEMPERATURE,
            "max_tokens": 500
        }
    
    def _get_max_context_messages(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."""
        return 20  # –°–æ–≥–ª–∞—Å–Ω–æ vision.md
    
    async def _make_request(self, payload: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API."""
        async with aiohttp.ClientSession(timeout=self.timeout) as session:
            async with session.post(
                self.api_url,
                headers=self.headers,
                json=payload
            ) as response:
                
                if response.status == 429:
                    raise Exception("Rate limit exceeded")
                elif response.status == 401:
                    raise Exception("Invalid API key")
                elif response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"API error {response.status}: {error_text}")
                
                data = await response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ JSON
                try:
                    message_content = data["choices"][0]["message"]["content"]
                    logger.info(f"LLM response: {message_content[:100]}...")
                    return message_content.strip()
                except (KeyError, IndexError) as e:
                    logger.error(f"Unexpected API response format: {data}")
                    raise Exception(f"Invalid response format: {e}")
    
    def _get_fallback_response(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM."""
        fallbacks = [
            "–î–∞–∂–µ –º–æ–π —Å–∞—Ä–∫–∞–∑–º —Å–ª–æ–º–∞–ª—Å—è –æ—Ç —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            "–û–≥–æ, —Ç—ã —Å—É–º–µ–ª —Å–ª–æ–º–∞—Ç—å –¥–∞–∂–µ –ò–ò! –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. ü§ñüí•",
            "–ö–∞–∂–µ—Ç—Å—è, –º–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–ª–∏ –æ—Ç —Ç–≤–æ–∏—Ö –≥–ª—É–±–æ–∫–∏—Ö –º—ã—Å–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏... –í–∏–¥–∏–º–æ, –¥–∞–∂–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–∞–∫–æ–º—É —É—Ä–æ–≤–Ω—é '–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏'."
        ]
        import random
        return random.choice(fallbacks)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
llm_client = LLMClient()
