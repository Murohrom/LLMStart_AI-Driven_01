name: 🐳 Docker Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'src/**'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'src/**'
      - 'pyproject.toml'

jobs:
  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🐳 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: sarcastic-bot:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🔍 Inspect Docker image
      run: |
        docker inspect sarcastic-bot:test
        docker history sarcastic-bot:test
    
    - name: 📊 Check image size
      run: |
        docker images sarcastic-bot:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
        # Предупреждение если образ больше 500MB
        SIZE_MB=$(docker images sarcastic-bot:test --format "{{.Size}}" | sed 's/MB//' | cut -d. -f1)
        if [ "$SIZE_MB" -gt 500 ]; then
          echo "⚠️ Warning: Docker image is quite large ($SIZE_MB MB)"
          echo "Consider optimizing the Dockerfile for production"
        else
          echo "✅ Docker image size is acceptable: $SIZE_MB MB"
        fi

  docker-test:
    name: 🧪 Test Docker Container
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🐳 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: sarcastic-bot:test
        load: true
        cache-from: type=gha
    
    - name: 🔧 Create test environment file
      run: |
        cat > .env.test << EOF
        TELEGRAM_BOT_TOKEN=test_token_for_ci
        OPENROUTER_API_KEY=test_api_key_for_ci
        OPENROUTER_MODEL=test/model
        LLM_TIMEOUT=5
        LLM_TEMPERATURE=0.8
        LLM_RETRY_ATTEMPTS=1
        LOG_LEVEL=INFO
        LOG_FILE=logs/bot.log
        DEBUG=false
        EOF
    
    - name: 🧪 Test container startup
      run: |
        echo "🚀 Testing container startup..."
        
        # Запускаем контейнер в фоне
        docker run -d --name test-bot --env-file .env.test sarcastic-bot:test
        
        # Ждем 10 секунд для инициализации
        echo "⏳ Waiting for container to initialize..."
        sleep 10
        
        # Проверяем что контейнер все еще работает
        if docker ps | grep test-bot; then
          echo "✅ Container is running successfully"
        else
          echo "❌ Container failed to start or crashed"
          docker logs test-bot
          exit 1
        fi
        
        # Останавливаем контейнер
        docker stop test-bot
        docker rm test-bot
    
    - name: 🧪 Test container logs
      run: |
        echo "📝 Testing container logging..."
        
        # Запускаем контейнер и проверяем логи
        docker run -d --name test-logs --env-file .env.test sarcastic-bot:test
        sleep 5
        
        # Получаем логи
        LOGS=$(docker logs test-logs 2>&1)
        
        # Проверяем что в логах есть ожидаемые сообщения
        if echo "$LOGS" | grep -i "starting"; then
          echo "✅ Found startup messages in logs"
        else
          echo "⚠️ No startup messages found in logs"
          echo "Logs content:"
          echo "$LOGS"
        fi
        
        # Очистка
        docker stop test-logs
        docker rm test-logs
    
    - name: 🧪 Test container with docker-compose
      run: |
        echo "🐳 Testing with docker-compose..."
        
        # Копируем тестовый env файл
        cp .env.test .env
        
        # Проверяем что docker-compose файл валидный
        docker-compose config
        
        # Запускаем сервис
        docker-compose up -d
        
        # Ждем инициализации
        sleep 10
        
        # Проверяем статус
        if docker-compose ps | grep "Up"; then
          echo "✅ Docker Compose service is running"
        else
          echo "❌ Docker Compose service failed"
          docker-compose logs
          exit 1
        fi
        
        # Останавливаем
        docker-compose down
    
    - name: 🔧 Test container environment variables
      run: |
        echo "🔍 Testing environment variable handling..."
        
        # Тест с неполными переменными (должен упасть)
        echo "TELEGRAM_BOT_TOKEN=" > .env.incomplete
        
        if docker run --env-file .env.incomplete sarcastic-bot:test 2>&1 | grep -i "required"; then
          echo "✅ Container correctly validates required environment variables"
        else
          echo "⚠️ Container should validate required environment variables"
        fi

  docker-security:
    name: 🔒 Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🐳 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: sarcastic-bot:security-test
        load: true
        cache-from: type=gha
    
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sarcastic-bot:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Не прерываем CI на уязвимостях в MVP
    
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
